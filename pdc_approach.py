# -*- coding: utf-8 -*-
"""Copy of optum_pdc_approach.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-HyEe7h8X6X8TWncJiGPUMo-4PIsMUhQ
"""

import pandas as pd
import numpy as np
from datetime import datetime

"""# loading csv data to pandas DataFrame"""

df = pd.read_csv("/content/patients.csv")
med = pd.read_csv("/content/medications.csv")
# all = pd.read_csv("/content/allergies.csv")
pro = pd.read_csv("/content/procedures.csv")
en = pd.read_csv("/content/encounters.csv")

"""Adding column for total no. of ideal days in medication dataframe"""

df = df.drop(['ZIP','LON', 'LAT','DRIVERS','PASSPORT', 'MAIDEN'], axis=1)

df.head()

df.BIRTHDATE.dtype

# from datetime import datetime, date
import datetime
def from_dob_to_age(dob):
    if(pd.notnull(dob)):
      today = datetime.date.today()
      dob = datetime.datetime.strptime(dob, '%Y-%m-%d')
      return today.year - dob.year - ((today.month, dob.day) < (dob.month, dob.day))
    else:
      return 0
    # return today.year - dob.year

df['AGE'] = df['BIRTHDATE'].apply(lambda x: from_dob_to_age(x))

df['DEATHAGE'] = df['DEATHDATE'].apply(lambda x: from_dob_to_age(x))

df['AGE']  = df['AGE'] - df['DEATHAGE']

df = df.drop(['DEATHAGE'],axis=1)
# df.insert(18,'P_VALUE',0.0)
# df

df.head()

"""creating a new framework based on keys"""

def duration(date):
    date = date[:-10]
    if(len(date)>9):
      date = datetime.datetime.strptime(date, '%Y-%m-%d')
      start_date = datetime.date(date.year, date.month, date.day)
      end_date = datetime.date.today()
      time_difference = end_date - start_date
      age = time_difference.days
      return age
    else:
      return 0

duration('2011-12-08T15:02:18Z')-duration('2011-12-22T15:02:18Z')

# df.head()
final = pd.merge(df,med,left_on='Id', right_on='PATIENT')
final.head()

# final['DURATION_2'] = final['STOP'].apply(lambda x:duration(str(x)))

final['DURATION_1'] = final['START'].apply(lambda x:duration(x))
final['DURATION_2'] = final['STOP'].apply(lambda x:duration(str(x)))
final['DURATION'] = final['DURATION_1']-final['DURATION_2']
final = final.drop(['DURATION_1','DURATION_2'],axis=1)
final.head()

# df.groupby("my_label").my_label.agg(get_count)
# def groupby(by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=no_default, observed: bool=False, dropna: bool=True) ->'DataFrameGroupBy'
temp = final.groupby("Id").sum('DURATION')
temp.head()
# df.groupby('id').sum()

final

temp

temp2 = final.groupby('Id').sum(['DURATION','TOTAL_COST'])
temp2.head()

temp2['COST_SPENT'] = temp2['HEALTHCARE_EXPENSES'] + temp2['HEALTHCARE_COVERAGE']
temp2.head()

temp2.drop(['HEALTHCARE_EXPENSES','HEALTHCARE_COVERAGE'],axis=1)
temp2.head()

# using .merge() function
res = pd.merge(all, med, on='PATIENT')
res.head()

# using .merge() function
r2 = pd.merge(res, pro, on='PATIENT')

r2.head()

# using .merge() function
r3 = pd.merge(en, df, left_on='PATIENT', right_on='Id')

#r3 = r3.drop(['DEATHAGE'],axis=1)
r3.head()

# pd.merge(all, med, on='PATIENT')
rfinal = pd.merge(r3, r2, on='PATIENT')
rfinal.head()

# df
def sexage(x,y):
  if(x>18  and x<34  ):
    if(y=='M'):
      return 0.729
    if(y=='F'):
      return 0.778
  if(x>35  and x<44 ):
    if(y=='M'):
      return 0.820
    if(y=='F'):
      return 0.803
  if(x>45  and x<54  ):
    if(y=='M'):
      return 0.699
    if(y=='F'):
      return 0.761
  if(x>55  and x<64  ):
    if(y=='M'):
      return 0.700
    if(y=='F'):
      return 0.642
  if(x>65  and x<74  ):
    if(y=='M'):
      return 0.545
    if(y=='F'):
      return 0.507
  if(x>75  and x<84  ):
    if(y=='M'):
      return 0.494
    if(y=='F'):
      return 0.442
  else:
    if(y=='M'):
      return 0.654
    if(y=='F'):
      return 0.670

def marital(m):
  x=0;
  if(m=='M'):
    return 0.37
  else:
    return 0.56

df['P_VALUE'] = df['P_VALUE'] + df['MARITAL'].apply(lambda x: marital(x))

df['P_VALUE'] = df['P_VALUE'] + df[['AGE','GENDER']].apply(lambda x,y: sexage(x,y))
# df[['col_1','col_2']].apply(get_sublist,axis=1)

df.head()